---
AWSTemplateFormatVersion: '2010-09-09'
# TODO: update this description to describe that we're creating a new VPC
Description: 'Kubernetes AWS CloudFormation Template: Create a Kubernetes cluster.
  The master node is an auto-recovering Amazon EC2 instance. Two more EC2
  instances in an AutoScalingGroup join the Kubernetes cluster as nodes. The
  AMI is chosen based on the region in which the stack is run. This example
  creates an EC2 security group for all instances to give you SSH access. Next
  steps: http://jump.heptio.com/aws-qs-next **WARNING** This template creates
  three Amazon EC2 instances. You will be billed for the AWS resources used if
  you create a stack from this template. **CREDIT** This template is provided
  courtesy of Heptio (https://www.heptio.com/), by Joe Beda and Sharon
  Campbell.'

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Amazon EC2 Configuration
      Parameters:
      - AvailabilityZone
      - InstanceType
      - BastionInstanceType
    - Label:
        default: Access Configuration
      Parameters:
      - SSHLocation
      - KeyName
    - Label:
        default: Kubernetes Configuration
      Parameters:
      - ClusterToken
      - K8sNodeCapacity
    - Label:
        default: Advanced
      Parameters:
      - QSS3BucketName
      - QSS3KeyPrefix

    ParameterLabels:
      KeyName:
        default: SSH Key
      AvailabilityZone:
        default: Availability Zone
      SSHLocation:
        default: SSH Ingress Location
      ClusterToken:
        default: Cluster Token
      InstanceType:
        default: Instance Type
      BastionInstanceType:
        default: Instance Type (Bastion Host)
      K8sNodeCapacity:
        default: Node Capacity
      QSS3BucketName:
        default: S3 Bucket
      QSS3KeyPrefix:
        default: S3 Key Prefix

Parameters:
  KeyName:
    Description: Existing EC2 KeyPair for SSH access
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  ClusterToken:
    Description: 'Generate this token (OSX/Linux): LC_CTYPE=c tr -dc ''a-zA-Z0-9'' </dev/urandom | fold -w 22 | head -n 1 | sed ''s/^\(.\{6\}\)/\1\./'''
    Type: String
    ConstraintDescription: must be a secure string, which will be used as the token
      for this cluster, of the format <6 character string>.<16 character string>.

  InstanceType:
    Description: EC2 instance type for the cluster
    Type: String
    Default: t2.medium
    AllowedValues:
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - m3.medium
    - m3.large
    - m3.xlarge
    - m3.2xlarge
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m4.4xlarge
    - m4.10xlarge
    - c3.large
    - c3.xlarge
    - c3.2xlarge
    - c3.4xlarge
    - c3.8xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - g2.2xlarge
    - g2.8xlarge
    - r3.large
    - r3.xlarge
    - r3.2xlarge
    - r3.4xlarge
    - r3.8xlarge
    - i2.xlarge
    - i2.2xlarge
    - i2.4xlarge
    - i2.8xlarge
    - d2.xlarge
    - d2.2xlarge
    - d2.4xlarge
    - d2.8xlarge
    ConstraintDescription: must be a valid EC2 instance type.

  BastionInstanceType:
    Description: EC2 instance type for the bastion host (used for public SSH access)
    Type: String
    Default: t2.micro
    AllowedValues:
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - m3.medium
    - m3.large
    - m3.xlarge
    - m3.2xlarge
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m4.4xlarge
    - m4.10xlarge
    - c3.large
    - c3.xlarge
    - c3.2xlarge
    - c3.4xlarge
    - c3.8xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - g2.2xlarge
    - g2.8xlarge
    - r3.large
    - r3.xlarge
    - r3.2xlarge
    - r3.4xlarge
    - r3.8xlarge
    - i2.xlarge
    - i2.2xlarge
    - i2.4xlarge
    - i2.8xlarge
    - d2.xlarge
    - d2.2xlarge
    - d2.4xlarge
    - d2.8xlarge
    ConstraintDescription: must be a valid EC2 instance type.

  AvailabilityZone:
    Description: The Availability Zone for this cluster.  Generally, Heptio recommends
      that you run a cluster per AZ and use tooling to coordinate across AZs.
    Type: AWS::EC2::AvailabilityZone::Name
    ConstraintDescription: must be the name of an AWS Availability Zone

  SSHLocation:
    Description: IP address range that can be used to SSH to the Bastion Host
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  K8sNodeCapacity:
    Default: '2'
    Description: Initial number of nodes
    Type: Number
    MinValue: '1'
    MaxValue: '20'
    ConstraintDescription: must be between 1 and 3 EC2 instances.

  # S3 Bucket configuration: mainly to grab downstream snapshots of the
  # quickstart-aws-vpc and quickstart-linux-bastion templates
  QSS3BucketName:
    AllowedPattern: "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$"
    ConstraintDescription: Quick Start bucket name can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen
      (-).
    # TODO: quickstart-reference is where this will eventually go, for now we
    # will override during testing.
    Default: heptio-aws-quickstart-test
    Description: S3 bucket name for the Quick Start assets. Quick Start bucket name
      can include numbers, lowercase letters, uppercase letters, and hyphens (-).
      It cannot start or end with a hyphen (-).
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: "^[0-9a-zA-Z-]+(/[0-9a-zA-Z-]+)*$"
    ConstraintDescription: Quick Start key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), and forward slash (/). It cannot start or end
      with forward slash (/) because they are automatically appended.
    Default: heptio/kubernetes/latest
    Description: S3 key prefix for the Quick Start assets. Quick Start key prefix
      can include numbers, lowercase letters, uppercase letters, hyphens (-), and
      forward slash (/). It cannot start or end with forward slash (/) because they
      are automatically appended.
    Type: String

Mappings:
  RegionMap:
    ap-northeast-1:
      '64': ami-18afc47f
    ap-northeast-2:
      '64': ami-93d600fd
    ap-south-1:
      '64': ami-dd3442b2
    ap-southeast-1:
      '64': ami-87b917e4
    ap-southeast-2:
      '64': ami-e6b58e85
    ca-central-1:
      '64': ami-7112a015
    eu-central-1:
      '64': ami-fe408091
    eu-west-1:
      '64': ami-ca80a0b9
    eu-west-2:
      '64': ami-ede2e889
    sa-east-1:
      '64': ami-e075ed8c
    us-east-1:
      '64': ami-9dcfdb8a
    us-east-2:
      '64': ami-fcc19b99
    us-west-1:
      '64': ami-b05203d0
    us-west-2:
      '64': ami-b2d463d2

Resources:
  # Resources for new VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
      - Key: Name
        Value:
          Ref: AWS::StackName

  DHCPOptions:
    Type: AWS::EC2::DHCPOptions
    Properties:
      DomainName:
        Fn::Join:
        - ''
        - - Ref: AWS::Region
          - ".compute.internal"
      DomainNameServers:
      - AmazonProvidedDNS

  VPCDHCPOptionsAssociation:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      VpcId:
        Ref: VPC
      DhcpOptionsId:
        Ref: DHCPOptions

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Network
        Value: Public

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: '10.0.0.0/19'
      AvailabilityZone:
        Ref: AvailabilityZone
      Tags:
      - Key: Name
        Value: Private subnet
      - Key: Network
        Value: Private

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: '10.0.128.0/20'
      AvailabilityZone:
        Ref: AvailabilityZone
      Tags:
      - Key: Name
        Value: Public subnet
      - Key: Network
        Value: Public
      - Key: KubernetesCluster
        Value:
          Ref: AWS::StackName
      MapPublicIpOnLaunch: true

  # The NAT IP for the private subnet, as seen from within the public one
  NATEIP:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  # The NAT gateway for the private subnet
  NATGateway:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
        - NATEIP
        - AllocationId
      SubnetId:
        Ref: PublicSubnet

  PublicSubnetRoute:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PublicSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway

  PrivateSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: Private subnets
      - Key: Network
        Value: Private

  PrivateSubnetRoute:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PrivateSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATGateway

  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet
      RouteTableId:
        Ref: PrivateSubnetRouteTable

  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: Public Subnets
      - Key: Network
        Value: Public

  PublicSubnetRoute:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PublicSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet
      RouteTableId:
        Ref: PublicSubnetRouteTable

  # Taken from github.com/aws-quickstart/quickstart-linux-bastion.  We don't
  # call it directly because that quickstart forces 2 bastion hosts and we only
  # want one
  BastionHost:
    Type: AWS::EC2::Instance
    Properties:
      ImageId:
        Fn::FindInMap:
        - RegionMap
        - Ref: AWS::Region
        - '64'
      InstanceType:
        Ref: BastionInstanceType
      NetworkInterfaces:
      - AssociatePublicIpAddress: true
        DeleteOnTermination: true
        DeviceIndex: 0
        SubnetId:
          Ref: PublicSubnet
        # This address is chosen because our public subnet begins at 10.0.128.0/20
        PrivateIpAddress: '10.0.128.5'
        GroupSet:
        - Ref: BastionSecurityGroup
      Tags:
      - Key: Name
        Value: bastion-host
      KeyName:
        Ref: KeyName
      UserData:
        Fn::Base64:
          Fn::Join:
          - ''
          - - "#!/bin/bash\n"
            - 'BASTION_BOOTSTRAP_FILE=bastion_bootstrap.sh'
            - "\n"
            - 'BASTION_BOOTSTRAP=https://s3.amazonaws.com/quickstart-reference/linux/bastion/latest/scripts/bastion_bootstrap.sh'
            - "\n"
            - 'curl -s ${BASTION_BOOTSTRAP} > ${BASTION_BOOTSTRAP_FILE} '
            - "\n"
            - 'chmod +x ${BASTION_BOOTSTRAP_FILE}'
            - "\n"
            - "./${BASTION_BOOTSTRAP_FILE} "
            - " --banner "
            - Fn::Join:
              - ''
              - - 'https://'
                - Ref: QSS3BucketName
                - '.s3.amazonaws.com/'
                - Ref: QSS3KeyPrefix
                - /scripts/banner_message.txt
            - " --enable true"
            - "\n"

  # Open up port 22 for SSH for the bastion host
  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp:
          Ref: SSHLocation

  K8sStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL:
        Fn::Join:
        - ''
        - - 'https://'
          - Ref: QSS3BucketName
          - '.s3.amazonaws.com/'
          - Ref: QSS3KeyPrefix
          - /templates/kubernetes-cluster.template
      Parameters:
        VPCID:
          Ref: VPC
        AvailabilityZone:
          Ref: AvailabilityZone
        InstanceType:
          Ref: InstanceType
        ClusterSubnetId:
          Ref: PrivateSubnet
        # Direct SSH access only from the bastion host itself
        SSHLocation:
          Fn::Join:
            - '/'
            - - Fn::GetAtt:
                - BastionHost
                - PrivateIp
              - '32'
        KeyName:
          Ref: KeyName
        ClusterToken:
          Ref: ClusterToken
        K8sNodeCapacity:
          Ref: K8sNodeCapacity
        QSS3BucketName:
          Ref: QSS3BucketName
        QSS3KeyPrefix:
          Ref: QSS3KeyPrefix
        ClusterAssociation:
          Ref: AWS::StackName

Outputs:
  # Outputs from VPC creation
  VPCID:
    Description: ID of the newly-created EC2 VPC
    Value:
      Ref: VPC

  BastionHostPublicIP:
    Description: IP Address of the bastion host for the newly-created EC2 VPC
    Value:
      Fn::GetAtt:
      - BastionHost
      - PublicIp

  BastionHostPublicDNS:
    Description: DNS FQDN of the bastion host for the newly-created EC2 VPC
    Value:
      Fn::GetAtt:
      - BastionHost
      - PublicDnsName

  # Outputs forwarded from the k8s template
  MasterInstanceId:
    Description: InstanceId of the master EC2 instance
    Value:
      Fn::GetAtt:
      - K8sStack
      - Outputs.MasterInstanceId

  MasterAZ:
    Description: Availability Zone of the master
    Value:
      Fn::GetAtt:
      - K8sStack
      - Outputs.MasterAZ

  MasterPrivateIP:
    Description: Private IP address of the master
    Value:
      Fn::GetAtt:
      - K8sStack
      - Outputs.MasterPrivateIP

  NodeGroupInstanceId:
    Description: InstanceId of the newly created NodeGroup
    Value:
      Fn::GetAtt:
      - K8sStack
      - Outputs.NodeGroupInstanceId

  ClusterToken:
    Description: Key that allows nodes to join this cluster; keep secret
    Value:
      Fn::GetAtt:
      - K8sStack
      - Outputs.ClusterToken

  JoinNodes:
    Description: Command to join more nodes to this cluster
    Value:
      Fn::GetAtt:
      - K8sStack
      - Outputs.JoinNodes

  NextSteps:
    Description: Verify your cluster and deploy a test application. Instructions at
      http://jump.heptio.com/aws-qs-next
    Value:
      Fn::GetAtt:
      - K8sStack
      - Outputs.NextSteps
