---
AWSTemplateFormatVersion: '2010-09-09' # Template version (this exact version is required by AWS)
Description: 'Kubernetes AWS CloudFormation Template: Create a Kubernetes cluster.
  The master node is an auto-recovering Amazon EC2 instance. Two more EC2
  instances in an AutoScalingGroup join the Kubernetes cluster as nodes. The
  AMI is chosen based on the region in which the stack is run. This example
  creates an EC2 security group for all instances to give you SSH access. Next
  steps: http://jump.heptio.com/aws-qs-next **WARNING** This template creates
  three Amazon EC2 instances. You will be billed for the AWS resources used if
  you create a stack from this template. **CREDIT** This template is provided
  courtesy of Heptio (https://www.heptio.com/), by Joe Beda, Sharon
  Campbell, and Ken Simon.'

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Amazon EC2 Configuration
      Parameters:
      - VPCID
      - AvailabilityZone
      - InstanceType
      - ClusterSubnetId
    - Label:
        default: Access Configuration
      Parameters:
      - SSHLocation
      - KeyName
    - Label:
        default: Kubernetes Configuration
      Parameters:
      - ClusterToken
      - K8sNodeCapacity
    - Label:
        default: Advanced
      Parameters:
      - QSS3BucketName
      - QSS3KeyPrefix
      - ClusterAssociation

    ParameterLabels:
      KeyName:
        default: SSH Key
      VPCID:
        default: VPC
      AvailabilityZone:
        default: Availability Zone
      ClusterSubnetId:
        default: Subnet
      SSHLocation:
        default: SSH Ingress Location
      ClusterToken:
        default: Cluster Token
      InstanceType:
        default: Instance Type
      K8sNodeCapacity:
        default: Node Capacity
      QSS3BucketName:
        default: S3 Bucket
      QSS3KeyPrefix:
        default: S3 Key Prefix
      ClusterAssociation:
        default: Cluster Association

# Parameters allow the user to pass settings to the template before building the stack
Parameters:
  # Required. Calls for the name of an existing EC2 KeyPair, to enable SSH access to the instances
  # http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html
  KeyName:
    Description: Existing EC2 KeyPair for SSH access
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  VPCID:
    Description: 'Your VPC to use for this cluster'
    Type: AWS::EC2::VPC::Id

  # Required. This is a new token all nodes will use to join the cluster
  # Kubernetes requires a token of the format xxxxxx.xxxxxxxxxxxxxxxx
  ClusterToken:
    Description: 'Generate this token (requires Python): python -c ''import random;
      print "%0x.%0x" % (random.SystemRandom().getrandbits(3*8), random.SystemRandom().getrandbits(8*8))'''
    Type: String
    ConstraintDescription: must be a secure string, which will be used as the token
      for this cluster, of the format <6 character string>.<16 character string>.

  ClusterSubnetId:
    Description: 'The subnet to use for this cluster.  Must belong to the availability zone above'
    Type: AWS::EC2::Subnet::Id

  ClusterAssociation:
    Description: 'A string, unique within your AWS account, to associate resources in this kubernetes cluster.  Leave blank to use this Quick Start Stack Name'
    Type: String

  # Default is t2.medium. EC2 instance type for the cluster
  # https://aws.amazon.com/ec2/instance-types/
  InstanceType:
    Description: EC2 instance type for the cluster
    Type: String
    Default: t2.medium
    AllowedValues:
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - m3.medium
    - m3.large
    - m3.xlarge
    - m3.2xlarge
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m4.4xlarge
    - m4.10xlarge
    - c3.large
    - c3.xlarge
    - c3.2xlarge
    - c3.4xlarge
    - c3.8xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - g2.2xlarge
    - g2.8xlarge
    - r3.large
    - r3.xlarge
    - r3.2xlarge
    - r3.4xlarge
    - r3.8xlarge
    - i2.xlarge
    - i2.2xlarge
    - i2.4xlarge
    - i2.8xlarge
    - d2.xlarge
    - d2.2xlarge
    - d2.4xlarge
    - d2.8xlarge
    ConstraintDescription: must be a valid EC2 instance type.

  # Required. This is an availability zone from your region
  # http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html
  AvailabilityZone:
    Description: The Availability Zone for this cluster.  Generally, Heptio recommends
      that you run a cluster per AZ and use tooling to coordinate across AZs.
    Type: AWS::EC2::AvailabilityZone::Name
    ConstraintDescription: must be the name of an AWS Availability Zone

  # Default 0.0.0.0/0 (all locations)
  # Specifies the IP range from which you will have SSH access over port 22
  # Used in the allow22 SecurityGroup
  SSHLocation:
    Description: IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  # Default 2. Choose 1-3 initial nodes to run cluster workloads (in addition to the master node instance)
  # You can scale up your cluster later and add more nodes
  K8sNodeCapacity:
    Default: '2'
    Description: Initial number of nodes
    Type: Number
    MinValue: '1'
    MaxValue: '20'
    ConstraintDescription: must be between 1 and 3 EC2 instances.

  # S3 Bucket configuration: For hosting our own downstream copy of calico
  # configuration and potentially other things.
  QSS3BucketName:
    AllowedPattern: "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$"
    ConstraintDescription: Quick Start bucket name can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen
      (-).
    # TODO: quickstart-reference is where this will eventually go, for now we
    # will override during testing.
    Default: heptio-aws-quickstart-test
    Description: S3 bucket name for the Quick Start assets. Quick Start bucket name
      can include numbers, lowercase letters, uppercase letters, and hyphens (-).
      It cannot start or end with a hyphen (-).
    Type: String

  QSS3KeyPrefix:
    AllowedPattern: "^[0-9a-zA-Z-]+(/[0-9a-zA-Z-]+)*$"
    ConstraintDescription: Quick Start key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), and forward slash (/). It cannot start or end
      with forward slash (/) because they are automatically appended.
    Default: heptio/kubernetes/latest
    Description: S3 key prefix for the Quick Start assets. Quick Start key prefix
      can include numbers, lowercase letters, uppercase letters, hyphens (-), and
      forward slash (/). It cannot start or end with forward slash (/) because they
      are automatically appended.
    Type: String

# http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/mappings-section-structure.html
Mappings:

  # http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html
  RegionMap:
    ap-northeast-1:
      '64': ami-18afc47f
    ap-northeast-2:
      '64': ami-93d600fd
    ap-south-1:
      '64': ami-dd3442b2
    ap-southeast-1:
      '64': ami-87b917e4
    ap-southeast-2:
      '64': ami-e6b58e85
    ca-central-1:
      '64': ami-7112a015
    eu-central-1:
      '64': ami-fe408091
    eu-west-1:
      '64': ami-ca80a0b9
    eu-west-2:
      '64': ami-ede2e889
    sa-east-1:
      '64': ami-e075ed8c
    us-east-1:
      '64': ami-9dcfdb8a
    us-east-2:
      '64': ami-fcc19b99
    us-west-1:
      '64': ami-b05203d0
    us-west-2:
      '64': ami-b2d463d2

# Helper Conditions which help find the right values for resources
Conditions:
  AssociationProvidedCondition:
    Fn::Not:
    - Fn::Equals:
      - Ref: ClusterAssociation
      - ''

# Resources are the AWS services we want to actually create as part of the Stack
Resources:

  # Install a CloudWatch logging group for system logs for each instance
  KubernetesLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Ref: AWS::StackName
      RetentionInDays: 14

  # This is an EC2 instance that will serve as our master node
  K8sMasterInstance:
    Type: AWS::EC2::Instance
    Properties:
      # Where the EC2 instance gets deployed geographically
      AvailabilityZone:
        Ref: AvailabilityZone
      # Refers to the MasterInstanceProfile resource, which applies the IAM role for the master instance
      # The IAM role allows us to create further AWS resources (like an EBS drive) from the cluster
      # This is needed for the Kubernetes-AWS cloud-provider integration
      IamInstanceProfile:
        Ref: MasterInstanceProfile
      # Type of instance; the default is t2.medium
      InstanceType:
        Ref: InstanceType
      # Adds our SSH key to the instance
      KeyName:
        Ref: KeyName
      NetworkInterfaces:
      - DeleteOnTermination: true
        DeviceIndex: 0
        SubnetId:
          Ref: ClusterSubnetId
        # Joins two security groups: A default group for cluster communication, and the new allow22 group
        # The default group allows all instances in the same stack to communicate internally
        # The allow22 group allows external communication on port 22 from a chosen CIDR range
        GroupSet:
        - Ref: ClusterSecGroup
      # Designates a name for this EC2 instance that will appear in the instances list (k8s-master)
      # Tags it with KubernetesCluster=<stackname> (needed for cloud-provider's IAM roles)
      Tags:
      - Key: Name
        Value: k8s-master
      - Key: KubernetesCluster
        Value:
          Fn::If:
          - AssociationProvidedCondition
          - Ref: ClusterAssociation
          - Ref: AWS::StackName
      # http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-instance.html#cfn-ec2-instance-imageid
      ImageId:
        Fn::FindInMap:
        - RegionMap
        - Ref: AWS::Region
        - '64'
      # This is where most of the Kubernetes stuff happens
      # The userdata contains a bash script that bootstraps Kubernetes
      # and useful related software like Docker for containers and Calico networking
      # The script itself gets written to /var/lib/cloud/instance/scripts/part-001
      # on the node, so you can view it there if you need to debug
      UserData:
        Fn::Base64:
          Fn::Sub: |
            #!/bin/bash -v

            # Set up apt before we install anything, so that we only have to `apt-get update` once
            # Get repository key
            curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -

            # Append key to sources file
            cat <<EOF > /etc/apt/sources.list.d/kubernetes.list
            deb http://apt.kubernetes.io/ kubernetes-xenial main
            EOF

            # Update package lists
            apt-get update

            # Install Cloudwatch bootstap tools and dependencies
            apt-get install -y unzip python python-setuptools
            easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz

            # Install Cloudwatch Logs
            mkdir -p /usr/local/aws
            wget -O /usr/local/aws/awslogs-agent-setup.py https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py
            chmod +x /usr/local/aws/awslogs-agent-setup.py

            cat <<EOF > /tmp/kubernetes-awslogs.conf
            [general]
            state_file = /var/awslogs/state/agent-state

            [/var/log/kube*]
            file = /var/log/kube*
            log_group_name = ${AWS::StackName}
            log_stream_name = {instance_id}
            datetime_format = %b %d %H:%M:%S

            [/var/log/cloud-init-output.log]
            file = /var/log/cloud-init-output.log
            log_group_name = ${AWS::StackName}
            log_stream_name = {instance_id}
            datetime_format = %b %d %H:%M:%S
            EOF

            python /usr/local/aws/awslogs-agent-setup.py -n -r ${AWS::Region} -c /tmp/kubernetes-awslogs.conf

            cat <<EOF > /etc/systemd/system/awslogs.service
            [Service]
            Type=simple
            Restart=always
            KillMode=process
            TimeoutSec=infinity
            PIDFile=/var/awslogs/state/awslogs.pid
            ExecStart=/var/awslogs/bin/awslogs-agent-launcher.sh --start --background --pidfile $PIDFILE --user awslogs --chuid awslogs &
            EOF

            systemctl enable awslogs.service
            systemctl start awslogs.service

            # Create directory and file to enable --cloud-provider=aws for kubelet
            # This is a systemd file
            mkdir -p /etc/systemd/system/kubelet.service.d/
            cat <<EOF > /etc/systemd/system/kubelet.service.d/20-cloud-provider.conf
            [Service]
            Environment="KUBELET_EXTRA_ARGS=--cloud-provider=aws"
            EOF

            # Install Docker
            apt-get install -y docker.io

            # Install kubernetes tools
            apt-get install -y kubelet kubeadm kubectl kubernetes-cni

            # reset kubeadm (workaround for kubelet package presence)
            kubeadm reset

            # Initialize master node
            kubeadm init --cloud-provider=aws --token=${ClusterToken}

            # Add-on for network Calico
            # (http://docs.projectcalico.org/v2.0/getting-started/kubernetes/installation/hosted/kubeadm/)
            # so pods can communicate
            kubectl apply -f https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}/scripts/calico.yaml

  # This is a CloudWatch alarm https://aws.amazon.com/cloudwatch/
  # If the master node is unresponsive for 5 minutes, AWS will attempt to recover it
  # It will preserve the original IP, which is important for Kubernetes networking
  # Based on http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-cloudwatch.html#cloudwatch-sample-recover-instance
  RecoveryTestAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Trigger a recovery when instance status check fails for 5
        consecutive minutes.
      Namespace: AWS/EC2
      MetricName: StatusCheckFailed_System
      Statistic: Minimum
      # 60-second periods (1 minute)
      Period: '60'
      # 5-minute check-ins
      EvaluationPeriods: '5'
      ComparisonOperator: GreaterThanThreshold
      Threshold: '0'
      # This is the call that actually tries to recover the instance
      AlarmActions:
      - Fn::Join:
        - ''
        - - 'arn:aws:automate:'
          - Ref: AWS::Region
          - ":ec2:recover"
      # Applies this alarm to our K8sMasterInstance
      Dimensions:
      - Name: InstanceId
        Value:
          Ref: K8sMasterInstance

  # This is the Auto Scaling Group that contains EC2 instances that are Kubernetes nodes
  # http://docs.aws.amazon.com/autoscaling/latest/userguide/AutoScalingGroup.html
  K8sNodeGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      # Where the EC2 instance gets deployed geographically
      AvailabilityZones:
      - Ref: AvailabilityZone
      # Refers to the K8sNodeCapacity parameter, which specifies the number of nodes (1-3)
      DesiredCapacity:
        Ref: K8sNodeCapacity
      # Refers to the LaunchConfig, which has specific config details for the EC2 instances
      LaunchConfigurationName:
        Ref: LaunchConfig
      # More cluster sizing
      MinSize: '1'
      MaxSize: '3'
      # VPC Zone Identifier is the subnets to put the hosts in
      VPCZoneIdentifier:
        - Ref: ClusterSubnetId
      # Designates names for these EC2 instances that will appear in the instances list (k8s-node)
      # Tags each node with KubernetesCluster=<stackname> (needed for cloud-provider's IAM roles)
      Tags:
      - Key: Name
        Value: k8s-node
        PropagateAtLaunch: 'true'
      - Key: KubernetesCluster
        Value:
          Fn::If:
          - AssociationProvidedCondition
          - Ref: ClusterAssociation
          - Ref: AWS::StackName
        PropagateAtLaunch: 'true'
    # Tells the group how many instances to update at a time, if an update is applied
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: '1'
        MaxBatchSize: '1'

  # This tells AWS what kinds of servers we want in our Auto Scaling Group
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      # Refers to the NodeInstanceProfile resource, which applies the IAM role for the nodes
      # The IAM role allows us to create further AWS resources (like an EBS drive) from the cluster
      # This is needed for the Kubernetes-AWS cloud-provider integration
      IamInstanceProfile:
        Ref: NodeInstanceProfile
      # http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-instance.html#cfn-ec2-instance-imageid
      ImageId:
        Fn::FindInMap:
        - RegionMap
        - Ref: AWS::Region
        - '64'
      # Type of instance; the default is t2.medium
      InstanceType:
        Ref: InstanceType
      # Adds our SSH key to the instance
      KeyName:
        Ref: KeyName
      # Join the cluster security group so that we can customize the access
      # control (See the ClusterSecGroup resource for details)
      SecurityGroups:
      - Ref: ClusterSecGroup
      # This is where most of the Kubernetes stuff happens
      # The userdata contains a bash script that bootstraps Kubernetes
      # and useful related software like Docker for containers and Calico networking
      # The script itself gets written to /var/lib/cloud/instance/scripts/part-001
      # on each node, so you can view it there if you need to debug
      UserData:
        Fn::Base64:
          Fn::Sub: |
            #!/bin/bash -v

            # Set up apt before we install anything, so that we only have to `apt-get update` once
            # Get repository key
            curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -

            # Append key to sources file
            cat <<EOF > /etc/apt/sources.list.d/kubernetes.list
            deb http://apt.kubernetes.io/ kubernetes-xenial main
            EOF

            # Update package lists
            apt-get update

            # Install Cloudwatch bootstap tools and dependencies
            apt-get install -y unzip python python-setuptools
            easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz

            # Install Cloudwatch Logs
            mkdir -p /usr/local/aws
            wget -O /usr/local/aws/awslogs-agent-setup.py https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py
            chmod +x /usr/local/aws/awslogs-agent-setup.py

            cat <<EOF > /tmp/kubernetes-awslogs.conf
            [general]
            state_file = /var/awslogs/state/agent-state

            [/var/log/kube*]
            file = /var/log/kube*
            log_group_name = ${AWS::StackName}
            log_stream_name = {instance_id}
            datetime_format = %b %d %H:%M:%S

            [/var/log/cloud-init-output.log]
            file = /var/log/cloud-init-output.log
            log_group_name = ${AWS::StackName}
            log_stream_name = {instance_id}
            datetime_format = %b %d %H:%M:%S
            EOF

            python /usr/local/aws/awslogs-agent-setup.py -n -r ${AWS::Region} -c /tmp/kubernetes-awslogs.conf

            cat <<EOF > /etc/systemd/system/awslogs.service
            [Service]
            Type=simple
            Restart=always
            KillMode=process
            TimeoutSec=infinity
            PIDFile=/var/awslogs/state/awslogs.pid
            ExecStart=/var/awslogs/bin/awslogs-agent-launcher.sh --start --background --pidfile $PIDFILE --user awslogs --chuid awslogs &
            EOF

            systemctl enable awslogs.service
            systemctl start awslogs.service

            # Create directory and file to enable --cloud-provider=aws for kubelet
            # This is a systemd file
            mkdir -p /etc/systemd/system/kubelet.service.d/
            cat <<EOF > /etc/systemd/system/kubelet.service.d/20-cloud-provider.conf
            [Service]
            Environment="KUBELET_EXTRA_ARGS=--cloud-provider=aws"
            EOF

            # Install Docker
            apt-get install -y docker.io

            # Install Kubernetes tools
            apt-get install -y kubelet kubeadm kubectl kubernetes-cni

            # reset kubeadm (workaround for kubelet package presence)
            kubeadm reset

            # Join master node
            kubeadm join --token=${ClusterToken} ${K8sMasterInstance.PrivateIp}

  # Define the (one) security group for all machines in the cluster.  Keeping
  # just one security group helps with k8s's cloud-provider=aws integration so
  # that it knows what security group to manage.
  ClusterSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for all machines in the cluster
      VpcId:
        Ref: VPCID
      # Security Groups must be tagged with KubernetesCluster=<cluster> so that
      # they can coexist in the same VPC
      Tags:
      - Key: KubernetesCluster
        Value:
          Fn::If:
          - AssociationProvidedCondition
          - Ref: ClusterAssociation
          - Ref: AWS::StackName
      - Key: Name
        Value: k8s-cluster-security-group

  # Permissions we add to the main security group:
  # - Ensure cluster machines can talk to one another
  ClusterSecGroupCrossTalk:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Ref: ClusterSecGroup
      SourceSecurityGroupId:
        Ref: ClusterSecGroup
      IpProtocol: '-1'
      FromPort: '0'
      ToPort: '65535'

  # - Open up port 22 for SSH into each machine
  # The allowed locations are chosen by the user in the SSHLocation parameter
  ClusterSecGroupAllow22:
    Metadata:
      Comment: Open up port 22 for SSH into each machine
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Ref: ClusterSecGroup
      IpProtocol: tcp
      FromPort: '22'
      ToPort: '22'
      CidrIp:
        Ref: SSHLocation

  # IAM role for nodes http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html
  NodeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      # IAM policy for nodes that allows specific AWS resource listing and creation
      # http://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html
      Policies:
      - PolicyName: node
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ec2:Describe*
            - ecr:GetAuthorizationToken
            - ecr:BatchCheckLayerAvailability
            - ecr:GetDownloadUrlForLayer
            - ecr:GetRepositoryPolicy
            - ecr:DescribeRepositories
            - ecr:ListImages
            - ecr:BatchGetImage
            Resource: "*"

      - PolicyName: cwlogs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStreams
            Resource: !Sub ["${LogGroupArn}:*", LogGroupArn: !GetAtt KubernetesLogGroup.Arn]

  # Resource that creates the node IAM role
  NodeInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: NodeRole

  # IAM role for the master node http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html
  MasterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      # IAM policy for the master node that allows specific AWS resource listing and creation
      # More permissive than the node role (it allows load balancer creation)
      # http://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html
      Policies:
      - PolicyName: master
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ec2:*
            - elasticloadbalancing:*
            - ecr:GetAuthorizationToken
            - ecr:BatchCheckLayerAvailability
            - ecr:GetDownloadUrlForLayer
            - ecr:GetRepositoryPolicy
            - ecr:DescribeRepositories
            - ecr:ListImages
            - ecr:BatchGetImage
            - autoscaling:DescribeAutoScalingGroups
            - autoscaling:UpdateAutoScalingGroup
            Resource: "*"

      - PolicyName: cwlogs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStreams
            Resource: !Sub ["${LogGroupArn}:*", LogGroupArn: !GetAtt KubernetesLogGroup.Arn]

  # Resource that creates the master node IAM role
  MasterInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: MasterRole

# Outputs are what AWS will show you after stack creation
# Generally they let you easily access some information about the stack
# like what IP address is assigned to your master node
# Read Descriptions below for more detail
Outputs:
  MasterInstanceId:
    Description: InstanceId of the master EC2 instance
    Value:
      Ref: K8sMasterInstance

  MasterAZ:
    Description: Availability Zone of the master
    Value:
      Fn::GetAtt:
      - K8sMasterInstance
      - AvailabilityZone

  MasterPrivateIP:
    Description: Private IP address of the master
    Value:
      Fn::GetAtt:
      - K8sMasterInstance
      - PrivateIp

  NodeGroupInstanceId:
    Description: InstanceId of the newly created NodeGroup
    Value:
      Ref: K8sNodeGroup

  ClusterToken:
    Description: Key that allows nodes to join this cluster; keep secret
    Value:
      Ref: ClusterToken

  JoinNodes:
    Description: Command to join more nodes to this cluster
    Value:
      Fn::Join:
      - ''
      - - kubeadm join --token=
        - Ref: ClusterToken
        - " "
        - Fn::GetAtt:
          - K8sMasterInstance
          - PrivateIp

  NextSteps:
    Description: Verify your cluster and deploy a test application. Instructions at
      http://jump.heptio.com/aws-qs-next
    Value: http://jump.heptio.com/aws-qs-next
