---
AWSTemplateFormatVersion: '2010-09-09' # Template version (this exact version is required by AWS)
Description: 'Kubernetes AWS CloudFormation Template: Create a Kubernetes cluster.
  The master node is an auto-recovering Amazon EC2 instance. Two more EC2
  instances in an AutoScalingGroup join the Kubernetes cluster as nodes. The
  AMI is chosen based on the region in which the stack is run. This example
  creates an EC2 security group for all instances to give you SSH access. Next
  steps: http://jump.heptio.com/aws-qs-next **WARNING** This template creates
  three Amazon EC2 instances. You will be billed for the AWS resources used if
  you create a stack from this template. **CREDIT** This template is provided
  courtesy of Heptio (https://www.heptio.com/), by Joe Beda, Sharon
  Campbell, and Ken Simon.'

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Amazon EC2 Configuration
      Parameters:
      - AvailabilityZone
      - InstanceType
    - Label:
        default: Access Configuration
      Parameters:
      - SSHLocation
      - KeyName
    - Label:
        default: Kubernetes Configuration
      Parameters:
      - ClusterToken
      - K8sNodeCapacity
    - Label:
        default: Advanced
      Parameters:
      - QSS3BucketName
      - QSS3KeyPrefix

    ParameterLabels:
      KeyName:
        default: SSH Key
      AvailabilityZone:
        default: Availability Zone
      SSHLocation:
        default: SSH Ingress Location
      ClusterToken:
        default: Cluster Token
      InstanceType:
        default: Instance Type
      K8sNodeCapacity:
        default: Node Capacity
      QSS3BucketName:
        default: S3 Bucket
      QSS3KeyPrefix:
        default: S3 Key Prefix

# Parameters allow the user to pass settings to the template before building the stack
Parameters:
  # Required. Calls for the name of an existing EC2 KeyPair, to enable SSH access to the instances
  # http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html
  KeyName:
    Description: Existing EC2 KeyPair for SSH access
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  # Required. This is a new token all nodes will use to join the cluster
  # Kubernetes requires a token of the format xxxxxx.xxxxxxxxxxxxxxxx
  ClusterToken:
    Description: 'Generate this token (requires Python): python -c ''import random;
      print "%0x.%0x" % (random.SystemRandom().getrandbits(3*8), random.SystemRandom().getrandbits(8*8))'''
    Type: String
    ConstraintDescription: must be a secure string, which will be used as the token
      for this cluster, of the format <6 character string>.<16 character string>.
  
  # Default is t2.medium. EC2 instance type for the cluster
  # https://aws.amazon.com/ec2/instance-types/
  InstanceType:
    Description: EC2 instance type for the cluster
    Type: String
    Default: t2.medium
    AllowedValues:
    - t1.micro
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - m1.small
    - m1.medium
    - m1.large
    - m1.xlarge
    - m2.xlarge
    - m2.2xlarge
    - m2.4xlarge
    - m3.medium
    - m3.large
    - m3.xlarge
    - m3.2xlarge
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m4.4xlarge
    - m4.10xlarge
    - c1.medium
    - c1.xlarge
    - c3.large
    - c3.xlarge
    - c3.2xlarge
    - c3.4xlarge
    - c3.8xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - g2.2xlarge
    - g2.8xlarge
    - r3.large
    - r3.xlarge
    - r3.2xlarge
    - r3.4xlarge
    - r3.8xlarge
    - i2.xlarge
    - i2.2xlarge
    - i2.4xlarge
    - i2.8xlarge
    - d2.xlarge
    - d2.2xlarge
    - d2.4xlarge
    - d2.8xlarge
    - hi1.4xlarge
    - hs1.8xlarge
    - cr1.8xlarge
    - cc2.8xlarge
    - cg1.4xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  # Required. This is an availability zone from your region
  # http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html
  AvailabilityZone:
    Description: The Availability Zone for this cluster.  Generally, Heptio recommends
      that you run a cluster per AZ and use tooling to coordinate across AZs.
    Type: AWS::EC2::AvailabilityZone::Name
    ConstraintDescription: must be the name of an AWS Availability Zone
  # Default 0.0.0.0/0 (all locations)
  # Specifies the IP range from which you will have SSH access over port 22
  # Used in the allow22 SecurityGroup
  SSHLocation:
    Description: IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  # Default 2. Choose 1-3 initial nodes to run cluster workloads (in addition to the master node instance)
  # You can scale up your cluster later and add more nodes
  K8sNodeCapacity:
    Default: '2'
    Description: Initial number of nodes
    Type: Number
    MinValue: '1'
    MaxValue: '3'
    ConstraintDescription: must be between 1 and 3 EC2 instances.
  # S3 Bucket configuration: For hosting our own downstream copy of calico
  # configuration and potentially other things.
  QSS3BucketName:
    AllowedPattern: "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$"
    ConstraintDescription: Quick Start bucket name can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen
      (-).
    # TODO: quickstart-reference is where this will eventually go, for now we
    # will override during testing.
    Default: heptio-aws-quickstart-test
    Description: S3 bucket name for the Quick Start assets. Quick Start bucket name
      can include numbers, lowercase letters, uppercase letters, and hyphens (-).
      It cannot start or end with a hyphen (-).
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: "^[0-9a-zA-Z-]+(/[0-9a-zA-Z-]+)*$"
    ConstraintDescription: Quick Start key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), and forward slash (/). It cannot start or end
      with forward slash (/) because they are automatically appended.
    Default: heptio/kubernetes/latest
    Description: S3 key prefix for the Quick Start assets. Quick Start key prefix
      can include numbers, lowercase letters, uppercase letters, hyphens (-), and
      forward slash (/). It cannot start or end with forward slash (/) because they
      are automatically appended.
    Type: String
# http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/mappings-section-structure.html
Mappings:
  # http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html
  RegionMap:
    ap-northeast-1:
      '64': ami-18afc47f
      Partition: aws
      QuickStartS3URL: https://s3.amazonaws.com
    ap-northeast-2:
      '64': ami-93d600fd
      Partition: aws
      QuickStartS3URL: https://s3.amazonaws.com
    ap-south-1:
      '64': ami-dd3442b2
      Partition: aws
      QuickStartS3URL: https://s3.amazonaws.com
    ap-southeast-1:
      '64': ami-87b917e4
      Partition: aws
      QuickStartS3URL: https://s3.amazonaws.com
    ap-southeast-2:
      '64': ami-e6b58e85
      Partition: aws
      QuickStartS3URL: https://s3.amazonaws.com
    ca-central-1:
      '64': ami-7112a015
      Partition: aws
      QuickStartS3URL: https://s3.amazonaws.com
    eu-central-1:
      '64': ami-fe408091
      Partition: aws
      QuickStartS3URL: https://s3.amazonaws.com
    eu-west-1:
      '64': ami-ca80a0b9
      Partition: aws
      QuickStartS3URL: https://s3.amazonaws.com
    eu-west-2:
      '64': ami-ede2e889
      Partition: aws
      QuickStartS3URL: https://s3.amazonaws.com
    sa-east-1:
      '64': ami-e075ed8c
      Partition: aws
      QuickStartS3URL: https://s3.amazonaws.com
    us-east-1:
      '64': ami-9dcfdb8a
      Partition: aws
      QuickStartS3URL: https://s3.amazonaws.com
    us-east-2:
      '64': ami-fcc19b99
      Partition: aws
      QuickStartS3URL: https://s3.amazonaws.com
    us-west-1:
      '64': ami-b05203d0
      Partition: aws
      QuickStartS3URL: https://s3.amazonaws.com
    us-west-2:
      '64': ami-b2d463d2
      Partition: aws
      QuickStartS3URL: https://s3.amazonaws.com

# Resources are the AWS services we want to actually create as part of the Stack
Resources:
  # This is an EC2 instance that will serve as our master node
  K8sMasterInstance:
    Type: AWS::EC2::Instance
    Properties:
      # Where the EC2 instance gets deployed geographically
      AvailabilityZone:
        Ref: AvailabilityZone
      # Refers to the MasterInstanceProfile resource, which applies the IAM role for the master instance
      # The IAM role allows us to create further AWS resources (like an EBS drive) from the cluster
      # This is needed for the Kubernetes-AWS cloud-provider integration
      IamInstanceProfile:
        Ref: MasterInstanceProfile
      # Type of instance; the default is t2.medium
      InstanceType:
        Ref: InstanceType
      # Adds our SSH key to the instance
      KeyName:
        Ref: KeyName
      # Joins two security groups: the existing default group, and the new allow22 group
      # The default group allows all instances in the same stack to communicate internally
      # The allow22 group allows external communication on port 22 from a chosen CIDR range
      SecurityGroups:
      - default
      - Ref: allow22
      # Designates a name for this EC2 instance that will appear in the instances list (k8s-master)
      # Tags it with KubernetesCluster=<stackname> (needed for cloud-provider's IAM roles)
      Tags:
      - Key: Name
        Value: k8s-master
      - Key: KubernetesCluster
        Value:
          Ref: AWS::StackName
      # http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-instance.html#cfn-ec2-instance-imageid
      ImageId:
        Fn::FindInMap:
        - RegionMap
        - Ref: AWS::Region
        - '64'
      # This is where most of the Kubernetes stuff happens
      # The userdata contains a bash script that bootstraps Kubernetes
      # and useful related software like Docker for containers and Calico networking
      # The script itself gets written to /var/lib/cloud/instance/scripts/part-001
      # on the node, so you can view it there if you need to debug
      UserData:
        Fn::Base64:
          # Nested arrays here: Fn::Join takes a first argument of a join
          # string (in this case ''), and the second argument is the array
          # itself.
          Fn::Join:
          - ''
          -
            - |-
              #!/bin/bash -v
              # Create directory and file to enable --cloud-provider=aws for kubelet
              # This is a systemd file
              mkdir -p /etc/systemd/system/kubelet.service.d/
              cat <<EOF > /etc/systemd/system/kubelet.service.d/20-cloud-provider.conf
              [Service]
              Environment="KUBELET_EXTRA_ARGS=--cloud-provider=aws"
              EOF

              # Get repository key
              curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -

              # Append key to sources file
              cat <<EOF > /etc/apt/sources.list.d/kubernetes.list
              deb http://apt.kubernetes.io/ kubernetes-xenial main
              EOF

              # Update package lists
              apt-get update

              # Install docker if you don't have it already.
              apt-get install -y docker.io

              # Install kubernetes tools
              apt-get install -y kubelet kubeadm kubectl kubernetes-cni

              # reset kubeadm (workaround for kubelet package presence)
              kubeadm reset

              # Initialize master node
              kubeadm init --cloud-provider=aws --token=

            # Embed the provided cluster token in the script, (no newline from
            # above since we're using |-)
            - { Ref: ClusterToken }
            - "\n"

            - |-
              # Add-on for network Calico
              # (http://docs.projectcalico.org/v2.0/getting-started/kubernetes/installation/hosted/kubeadm/)
              # so pods can communicate
              kubectl apply -f
            - Fn::Join:
              - "/"
              - - Fn::FindInMap:
                  - RegionMap
                  - Ref: AWS::Region
                  - QuickStartS3URL
                - Ref: QSS3BucketName
                - Ref: QSS3KeyPrefix
                - scripts/calico.yaml
            - "\n"

  # This is a CloudWatch alarm https://aws.amazon.com/cloudwatch/
  # If the master node is unresponsive for 5 minutes, AWS will attempt to recover it
  # It will preserve the original IP, which is important for Kubernetes networking
  # Based on http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-cloudwatch.html#cloudwatch-sample-recover-instance
  RecoveryTestAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Trigger a recovery when instance status check fails for 5
        consecutive minutes.
      Namespace: AWS/EC2
      MetricName: StatusCheckFailed_System
      Statistic: Minimum
      # 60-second periods (1 minute)
      Period: '60'
      # 5-minute check-ins
      EvaluationPeriods: '5'
      ComparisonOperator: GreaterThanThreshold
      Threshold: '0'
      # This is the call that actually tries to recover the instance
      AlarmActions:
      - Fn::Join:
        - ''
        - - 'arn:aws:automate:'
          - Ref: AWS::Region
          - ":ec2:recover"
      # Applies this alarm to our K8sMasterInstance
      Dimensions:
      - Name: InstanceId
        Value:
          Ref: K8sMasterInstance

  K8sNodeGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones:
      - Ref: AvailabilityZone
      DesiredCapacity:
        Ref: K8sNodeCapacity
      LaunchConfigurationName:
        Ref: LaunchConfig
      MinSize: '1'
      MaxSize: '3'
      Tags:
      - Key: Name
        Value: k8s-node
        PropagateAtLaunch: 'true'
      - Key: KubernetesCluster
        Value:
          Ref: AWS::StackName
        PropagateAtLaunch: 'true'
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: '1'
        MaxBatchSize: '1'

  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      IamInstanceProfile:
        Ref: NodeInstanceProfile
      ImageId:
        Fn::FindInMap:
        - RegionMap
        - Ref: AWS::Region
        - '64'
      InstanceType:
        Ref: InstanceType
      KeyName:
        Ref: KeyName
      SecurityGroups:
      - default
      - Ref: allow22
      UserData:
        Fn::Base64:
          Fn::Join:
          - ''
          -
            - |-
              #!/bin/bash -v

              # Create directory and file to enable --cloud-provider=aws for kubelet
              mkdir -p /etc/systemd/system/kubelet.service.d/

              cat <<EOF > /etc/systemd/system/kubelet.service.d/20-cloud-provider.conf
              [Service]
              Environment="KUBELET_EXTRA_ARGS=--cloud-provider=aws
              EOF

              # Get repository key
              curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -

              # Append key to sources file
              cat <<EOF > /etc/apt/sources.list.d/kubernetes.list
              deb http://apt.kubernetes.io/ kubernetes-xenial main
              EOF

              # Update package lists
              apt-get update

              # Install docker if you don't have it already.
              apt-get install -y docker.io

              # Install kubernetes tools
              apt-get install -y kubelet kubeadm kubectl kubernetes-cni

              # reset kubeadm (workaround for kubelet package presence)
              kubeadm reset

              # Join master node
              kubeadm join --token=

            - { Ref: ClusterToken }
            - " "
            - Fn::GetAtt:
              - K8sMasterInstance
              - PrivateIp
            - "\n"

  # Open up port 22 for SSH into each machine
  allow22:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp:
          Ref: SSHLocation

      # Security Groups must be tagged with KubernetesCluster=<cluster> so that
      # they can coexist in the same VPC
      Tags:
      - Key: KubernetesCluster
        Value:
          Ref: AWS::StackName

  NodeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: node
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ec2:Describe*
            - ecr:GetAuthorizationToken
            - ecr:BatchCheckLayerAvailability
            - ecr:GetDownloadUrlForLayer
            - ecr:GetRepositoryPolicy
            - ecr:DescribeRepositories
            - ecr:ListImages
            - ecr:BatchGetImage
            Resource: "*"

  NodeInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: NodeRole

  MasterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: master
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ec2:*
            - elasticloadbalancing:*
            - ecr:GetAuthorizationToken
            - ecr:BatchCheckLayerAvailability
            - ecr:GetDownloadUrlForLayer
            - ecr:GetRepositoryPolicy
            - ecr:DescribeRepositories
            - ecr:ListImages
            - ecr:BatchGetImage
            - autoscaling:DescribeAutoScalingGroups
            - autoscaling:UpdateAutoScalingGroup
            Resource: "*"

  MasterInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: MasterRole

Outputs:
  MasterInstanceId:
    Description: InstanceId of the master EC2 instance
    Value:
      Ref: K8sMasterInstance

  MasterAZ:
    Description: Availability Zone of the master
    Value:
      Fn::GetAtt:
      - K8sMasterInstance
      - AvailabilityZone

  MasterPublicDNS:
    Description: Public DNSName of the master
    Value:
      Fn::GetAtt:
      - K8sMasterInstance
      - PublicDnsName

  MasterPublicIP:
    Description: Public IP address of the master
    Value:
      Fn::GetAtt:
      - K8sMasterInstance
      - PublicIp

  MasterPrivateIP:
    Description: Private IP address of the master
    Value:
      Fn::GetAtt:
      - K8sMasterInstance
      - PrivateIp

  NodeGroupInstanceId:
    Description: InstanceId of the newly created NodeGroup
    Value:
      Ref: K8sNodeGroup

  ClusterToken:
    Description: Key that allows nodes to join this cluster; keep secret
    Value:
      Ref: ClusterToken

  JoinNodes:
    Description: Command to join more nodes to this cluster
    Value:
      Fn::Join:
      - ''
      - - kubeadm join --token=
        - Ref: ClusterToken
        - " "
        - Fn::GetAtt:
          - K8sMasterInstance
          - PrivateIp

  NextSteps:
    Description: Verify your cluster and deploy a test application. Instructions at
      http://jump.heptio.com/aws-qs-next
    Value: http://jump.heptio.com/aws-qs-next
